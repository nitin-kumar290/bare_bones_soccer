"""
Django settings for barebones project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import boto3


import sys
import os
#import dj_database_url


# from django.db.backends.sqlite3.base import Database
# Database.create_deterministic_function = lambda *args, **kwargs: None

# Only use pysqlite3 in Lambda environment
# if os.environ.get('LAMBDA_TASK_ROOT'):
#     try:
#         import pysqlite3
#         sys.modules['sqlite3'] = pysqlite3
#     except ImportError:
#         pass

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'fallback-secret-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']#['localhost', '127.0.0.1', '192.168.0.14']

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# AWS Storage Settings
AWS_ACCESS_KEY_ID = None#os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = None#os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = 'bare-bones-soccer'
AWS_S3_REGION_NAME = 'us-east-2'  # e.g., 'us-east-1'
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
AWS_DEFAULT_ACL = None
AWS_S3_VERIFY = True
AWS_S3_SIGNATURE_VERSION = 's3v4'

# Local path for SQLite (Lambda stores it temporarily)
LOCAL_SQLITE_PATH = "/tmp/db.sqlite3"

# Remote S3 path
AWS_SQLITE_BUCKET_NAME = 'bare-bones-soccer'
S3_SQLITE_KEY = "db-sql-lite/db.sqlite3"

# Static Files on S3
STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/static/'
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# Media Files on S3
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'

SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp',
    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'barebones.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'barebones.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'neondb',
        'USER': 'neondb_owner',
        'PASSWORD': 'npg_Su79BjpJcrvi',
        'HOST': 'ep-odd-dawn-a5d2mw2k-pooler.us-east-2.aws.neon.tech',
        #'PORT': '5432',
        'CONN_MAX_AGE': 600,
        'OPTIONS': {
            'sslmode': 'require',  # Enforce SSL for security
        },
    }
}

# Use the custom SQLite binary in AWS Lambda
# if "AWS_LAMBDA_FUNCTION_NAME" in os.environ:
#     os.environ["LD_LIBRARY_PATH"] = os.path.join(os.getcwd(), "sqlite-bin/lib")
#     os.environ["PATH"] = os.path.join(os.getcwd(), "sqlite-bin/bin") + ":" + os.environ["PATH"]


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True




# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# STATIC_URL = 'static/'
# STATICFILES_DIRS = ["myapp/static",]
# STATIC_ROOT = BASE_DIR / "staticfiles"

# MEDIA_URL = '/media/'
# MEDIA_ROOT = BASE_DIR / 'media'

# def download_sqlite_from_s3():
#     """Download SQLite DB from S3 to /tmp in AWS Lambda"""
#     s3 = boto3.client("s3",
#                       aws_access_key_id=AWS_ACCESS_KEY_ID,
#                       aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
#                       region_name=AWS_S3_REGION_NAME)

#     try:
#         print("Downloading SQLite DB from S3...")
#         s3.download_file(AWS_SQLITE_BUCKET_NAME, S3_SQLITE_KEY, LOCAL_SQLITE_PATH)
#         print("[INFO] Successfully downloaded database to:", LOCAL_SQLITE_PATH)
#     except Exception as e:
#         print(f"Could not download SQLite DB: {e}. A new one will be created.")

# def upload_sqlite_to_s3():
#     """Upload SQLite DB back to S3"""
#     s3 = boto3.client("s3",
#                       aws_access_key_id=AWS_ACCESS_KEY_ID,
#                       aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
#                       region_name=AWS_S3_REGION_NAME)

#     try:
#         print("Uploading SQLite DB to S3...")
#         s3.upload_file(LOCAL_SQLITE_PATH, AWS_SQLITE_BUCKET_NAME, S3_SQLITE_KEY)
#         print("[INFO] Successfully Uploaded database to:", LOCAL_SQLITE_PATH)
#     except Exception as e:
#         print(f"Failed to upload SQLite DB: {e}")